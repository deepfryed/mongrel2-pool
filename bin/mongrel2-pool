#!/usr/bin/env ruby

require 'optparse'

MONGREL2_POOL_STARTUP = $0 + ' ' + ARGV.join(' ')

paths    = []
help     = false
rackfile = Dir.pwd + '/config.ru'
config   = Dir.pwd + '/config.rb'

def usage
  %q{

    mongrel2-pool [options] command

    options:

    -h        displays this help.
    -I path   include this path.
    -R path   use this rackfile, defaults to config.ru in current directory.
    -C path   use this config file for mongrel2-pool options.

    command can be one of

    start     starts the server pool.
    stop      stops the server pool.
    restart   graceful restart of server pool.
    kill      kill the server and workers, smite them with fiery vengeance.

  }
end

parser = OptionParser.new do |opt|
  opt.on('-h',      '--help')                  { help = true }
  opt.on('-I path', '--include  path', String) {|name| paths   << name }
  opt.on('-R file', '--rackup   file', String) {|name| rackfile = name }
  opt.on('-C file', '--config   file', String) {|name| config   = name }
end

begin
  parser.parse!
rescue OptionParser::ParseError => e
  puts ""
  puts "[ERROR} #{e.message}"
  puts usage
  exit 1
end

if help
  puts usage
  exit
end

paths.each {|path| $:.unshift(path)}

require 'mongrel2-pool'
require 'mongrel2/pool/runner'

case ARGV.last
  when 'start'   then Mongrel2::Pool.runner(rackfile, config).start
  when 'stop'    then Mongrel2::Pool.runner(rackfile, config).stop
  when 'restart' then Mongrel2::Pool.runner(rackfile, config).restart
  when 'kill'    then Mongrel2::Pool.runner(rackfile, config).kill
  else
    if ARGV.last.nil? or ARGV.last.empty?
      puts "ERROR: missing command [start|stop|restart|kill]"
    else
      puts "ERROR: Invalid command #{ARGV.last}"
    end
    puts usage
    exit 1
end
